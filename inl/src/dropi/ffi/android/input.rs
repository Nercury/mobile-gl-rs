use android_looper_sys::*;

/* automatically generated by rust-bindgen */

#[derive(Clone, Copy)]
#[repr(i32)]
pub enum AKeyState {
    UNKNOWN = -1,
    UP = 0,
    DOWN = 1,
    VIRTUAL = 2,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum AMeta {
    NONE = 0,
    ALT_ON = 2,
    ALT_LEFT_ON = 16,
    ALT_RIGHT_ON = 32,
    SHIFT_ON = 1,
    SHIFT_LEFT_ON = 64,
    SHIFT_RIGHT_ON = 128,
    SYM_ON = 4,
    FUNCTION_ON = 8,
    CTRL_ON = 4096,
    CTRL_LEFT_ON = 8192,
    CTRL_RIGHT_ON = 16384,
    META_ON = 65536,
    META_LEFT_ON = 131072,
    META_RIGHT_ON = 262144,
    CAPS_LOCK_ON = 1048576,
    NUM_LOCK_ON = 2097152,
    SCROLL_LOCK_ON = 4194304,
}
pub enum AInputEvent { }
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum AInputEventType {
    KEY = 1,
    MOTION = 2,
}
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum AKeyEventAction {
    DOWN = 0,
    UP = 1,
    MULTIPLE = 2,
}
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum AKeyEventFlag {
    WOKE_HERE = 1,
    SOFT_KEYBOARD = 2,
    KEEP_TOUCH_MODE = 4,
    FROM_SYSTEM = 8,
    EDITOR_ACTION = 16,
    CANCELED = 32,
    VIRTUAL_HARD_KEY = 64,
    LONG_PRESS = 128,
    CANCELED_LONG_PRESS = 256,
    TRACKING = 512,
    FALLBACK = 1024,
}
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum AMotionEventAction {
    MASK = 255,
    POINTER_INDEX_MASK = 65280,
    DOWN = 0,
    UP = 1,
    MOVE = 2,
    CANCEL = 3,
    OUTSIDE = 4,
    POINTER_DOWN = 5,
    POINTER_UP = 6,
    HOVER_MOVE = 7,
    SCROLL = 8,
    HOVER_ENTER = 9,
    HOVER_EXIT = 10,
}
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum AMotionEventFlag { AMOTION_EVENT_FLAG_WINDOW_IS_OBSCURED = 1, }
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum AMotionEventEdgeFlag {
    NONE = 0,
    TOP = 1,
    BOTTOM = 2,
    LEFT = 4,
    RIGHT = 8,
}
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum AMotionEventAxis {
    X = 0,
    Y = 1,
    PRESSURE = 2,
    SIZE = 3,
    TOUCH_MAJOR = 4,
    TOUCH_MINOR = 5,
    TOOL_MAJOR = 6,
    TOOL_MINOR = 7,
    ORIENTATION = 8,
    VSCROLL = 9,
    HSCROLL = 10,
    Z = 11,
    RX = 12,
    RY = 13,
    RZ = 14,
    HAT_X = 15,
    HAT_Y = 16,
    LTRIGGER = 17,
    RTRIGGER = 18,
    THROTTLE = 19,
    RUDDER = 20,
    WHEEL = 21,
    GAS = 22,
    BRAKE = 23,
    DISTANCE = 24,
    TILT = 25,
    GENERIC_1 = 32,
    GENERIC_2 = 33,
    GENERIC_3 = 34,
    GENERIC_4 = 35,
    GENERIC_5 = 36,
    GENERIC_6 = 37,
    GENERIC_7 = 38,
    GENERIC_8 = 39,
    GENERIC_9 = 40,
    GENERIC_10 = 41,
    GENERIC_11 = 42,
    GENERIC_12 = 43,
    GENERIC_13 = 44,
    GENERIC_14 = 45,
    GENERIC_15 = 46,
    GENERIC_16 = 47,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum AMotionEventButton {
    PRIMARY = 1,
    SECONDARY = 2,
    TERTIARY = 4,
    BACK = 8,
    FORWARD = 16,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum AMotionEventToolType {
    UNKNOWN = 0,
    FINGER = 1,
    STYLUS = 2,
    MOUSE = 3,
    ERASER = 4,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum AInputSourceClass {
    MASK = 255,
    NONE = 0,
    BUTTON = 1,
    POINTER = 2,
    NAVIGATION = 4,
    POSITION = 8,
    JOYSTICK = 16,
}
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum AInputSource {
    UNKNOWN = 0,
    KEYBOARD = 257,
    DPAD = 513,
    GAMEPAD = 1025,
    TOUCHSCREEN = 4098,
    MOUSE = 8194,
    STYLUS = 16386,
    TRACKBALL = 65540,
    TOUCHPAD = 1048584,
    TOUCH_NAVIGATION = 2097152,
    JOYSTICK = 16777232,
    ANY = -256,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum AInputKeyboardType {
    NONE = 0,
    NON_ALPHABETIC = 1,
    ALPHABETIC = 2,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum AInputMotionRange {
    X = 0,
    Y = 1,
    PRESSURE = 2,
    SIZE = 3,
    TOUCH_MAJOR = 4,
    TOUCH_MINOR = 5,
    TOOL_MAJOR = 6,
    TOOL_MINOR = 7,
    ORIENTATION = 8,
}
pub enum AInputQueue { }
extern "C" {
    pub fn AInputEvent_getType(event: *const AInputEvent) -> AInputEventType;
    pub fn AInputEvent_getDeviceId(event: *const AInputEvent) -> i32;
    pub fn AInputEvent_getSource(event: *const AInputEvent) -> AInputSource;
    pub fn AKeyEvent_getAction(key_event: *const AInputEvent) -> AKeyEventAction;
    pub fn AKeyEvent_getFlags(key_event: *const AInputEvent) -> AKeyEventFlag;
    pub fn AKeyEvent_getKeyCode(key_event: *const AInputEvent) -> i32;
    pub fn AKeyEvent_getScanCode(key_event: *const AInputEvent) -> i32;
    pub fn AKeyEvent_getMetaState(key_event: *const AInputEvent) -> i32;
    pub fn AKeyEvent_getRepeatCount(key_event: *const AInputEvent) -> i32;
    pub fn AKeyEvent_getDownTime(key_event: *const AInputEvent) -> i64;
    pub fn AKeyEvent_getEventTime(key_event: *const AInputEvent) -> i64;
    pub fn AMotionEvent_getAction(motion_event: *const AInputEvent)
     -> AMotionEventAction;
    pub fn AMotionEvent_getFlags(motion_event: *const AInputEvent) -> AMotionEventFlag;
    pub fn AMotionEvent_getMetaState(motion_event: *const AInputEvent)
     -> i32;
    pub fn AMotionEvent_getButtonState(motion_event: *const AInputEvent)
     -> i32;
    pub fn AMotionEvent_getEdgeFlags(motion_event: *const AInputEvent)
     -> AMotionEventEdgeFlag;
    pub fn AMotionEvent_getDownTime(motion_event: *const AInputEvent)
     -> i64;
    pub fn AMotionEvent_getEventTime(motion_event: *const AInputEvent)
     -> i64;
    pub fn AMotionEvent_getXOffset(motion_event: *const AInputEvent)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getYOffset(motion_event: *const AInputEvent)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getXPrecision(motion_event: *const AInputEvent)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getYPrecision(motion_event: *const AInputEvent)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getPointerCount(motion_event: *const AInputEvent)
     -> usize;
    pub fn AMotionEvent_getPointerId(motion_event: *const AInputEvent,
                                     pointer_index: usize) -> i32;
    pub fn AMotionEvent_getToolType(motion_event: *const AInputEvent,
                                    pointer_index: usize) -> i32;
    pub fn AMotionEvent_getRawX(motion_event: *const AInputEvent,
                                pointer_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getRawY(motion_event: *const AInputEvent,
                                pointer_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getX(motion_event: *const AInputEvent,
                             pointer_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getY(motion_event: *const AInputEvent,
                             pointer_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getPressure(motion_event: *const AInputEvent,
                                    pointer_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getSize(motion_event: *const AInputEvent,
                                pointer_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getTouchMajor(motion_event: *const AInputEvent,
                                      pointer_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getTouchMinor(motion_event: *const AInputEvent,
                                      pointer_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getToolMajor(motion_event: *const AInputEvent,
                                     pointer_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getToolMinor(motion_event: *const AInputEvent,
                                     pointer_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getOrientation(motion_event: *const AInputEvent,
                                       pointer_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getAxisValue(motion_event: *const AInputEvent,
                                     axis: AMotionEventAxis, pointer_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getHistorySize(motion_event: *const AInputEvent)
     -> usize;
    pub fn AMotionEvent_getHistoricalEventTime(motion_event:
                                                   *const AInputEvent,
                                               history_index: usize)
     -> i64;
    pub fn AMotionEvent_getHistoricalRawX(motion_event: *const AInputEvent,
                                          pointer_index: usize,
                                          history_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getHistoricalRawY(motion_event: *const AInputEvent,
                                          pointer_index: usize,
                                          history_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getHistoricalX(motion_event: *const AInputEvent,
                                       pointer_index: usize,
                                       history_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getHistoricalY(motion_event: *const AInputEvent,
                                       pointer_index: usize,
                                       history_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getHistoricalPressure(motion_event:
                                                  *const AInputEvent,
                                              pointer_index: usize,
                                              history_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getHistoricalSize(motion_event: *const AInputEvent,
                                          pointer_index: usize,
                                          history_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getHistoricalTouchMajor(motion_event:
                                                    *const AInputEvent,
                                                pointer_index: usize,
                                                history_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getHistoricalTouchMinor(motion_event:
                                                    *const AInputEvent,
                                                pointer_index: usize,
                                                history_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getHistoricalToolMajor(motion_event:
                                                   *const AInputEvent,
                                               pointer_index: usize,
                                               history_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getHistoricalToolMinor(motion_event:
                                                   *const AInputEvent,
                                               pointer_index: usize,
                                               history_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getHistoricalOrientation(motion_event:
                                                     *const AInputEvent,
                                                 pointer_index: usize,
                                                 history_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AMotionEvent_getHistoricalAxisValue(motion_event:
                                                   *const AInputEvent,
                                               axis: AMotionEventAxis,
                                               pointer_index: usize,
                                               history_index: usize)
     -> ::std::os::raw::c_float;
    pub fn AInputQueue_attachLooper(queue: *mut AInputQueue,
                                    looper: *mut ALooper,
                                    ident: ::std::os::raw::c_int,
                                    callback: ALooper_callbackFunc,
                                    data: *mut ::std::os::raw::c_void);
    pub fn AInputQueue_detachLooper(queue: *mut AInputQueue);
    pub fn AInputQueue_hasEvents(queue: *mut AInputQueue) -> i32;
    pub fn AInputQueue_getEvent(queue: *mut AInputQueue,
                                outEvent: *mut *mut AInputEvent) -> i32;
    pub fn AInputQueue_preDispatchEvent(queue: *mut AInputQueue,
                                        event: *mut AInputEvent) -> i32;
    pub fn AInputQueue_finishEvent(queue: *mut AInputQueue,
                                   event: *mut AInputEvent,
                                   handled: ::std::os::raw::c_int);
}

/* automatically generated by rust-bindgen */

pub enum ALooper { }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum ALooperPrepare { ALLOW_NON_CALLBACKS = 1, }
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum ALooperPoll {
    WAKE = -1,
    CALLBACK = -2,
    TIMEOUT = -3,
    ERROR = -4,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum ALooperEvent {
    INPUT = 1,
    OUTPUT = 2,
    ERROR = 4,
    HANGUP = 8,
    INVALID = 16,
}
pub type ALooper_callbackFunc =
    ::std::option::Option<unsafe extern "C" fn(fd: ::std::os::raw::c_int,
                                               events: ::std::os::raw::c_int,
                                               data:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn ALooper_forThread() -> *mut ALooper;
    pub fn ALooper_prepare(opts: ::std::os::raw::c_int) -> *mut ALooper;
    pub fn ALooper_acquire(looper: *mut ALooper);
    pub fn ALooper_release(looper: *mut ALooper);
    pub fn ALooper_pollOnce(timeoutMillis: ::std::os::raw::c_int,
                            outFd: *mut ::std::os::raw::c_int,
                            outEvents: *mut ::std::os::raw::c_int,
                            outData: *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ALooper_pollAll(timeoutMillis: ::std::os::raw::c_int,
                           outFd: *mut ::std::os::raw::c_int,
                           outEvents: *mut ::std::os::raw::c_int,
                           outData: *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ALooper_wake(looper: *mut ALooper);
    pub fn ALooper_addFd(looper: *mut ALooper, fd: ::std::os::raw::c_int,
                         ident: ::std::os::raw::c_int,
                         events: ::std::os::raw::c_int,
                         callback: ALooper_callbackFunc,
                         data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn ALooper_removeFd(looper: *mut ALooper, fd: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}

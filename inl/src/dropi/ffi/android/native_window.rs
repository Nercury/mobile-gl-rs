use dropi::ffi::android::rect::*;

/* automatically generated by rust-bindgen */

#[derive(Clone, Copy)]
#[repr(i32)]
pub enum WindowFormat {
    RGBA_8888 = 1,
    RGBX_8888 = 2,
    RGB_565 = 4,
}
pub enum ANativeWindow { }
#[repr(C)]
#[derive(Copy)]
pub struct ANativeWindow_Buffer {
    pub width: i32,
    pub height: i32,
    pub stride: i32,
    pub format: i32,
    pub bits: *mut ::std::os::raw::c_void,
    pub reserved: [u32; 6usize],
}
impl ::std::clone::Clone for ANativeWindow_Buffer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for ANativeWindow_Buffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub fn ANativeWindow_acquire(window: *mut ANativeWindow);
    pub fn ANativeWindow_release(window: *mut ANativeWindow);
    pub fn ANativeWindow_getWidth(window: *mut ANativeWindow) -> i32;
    pub fn ANativeWindow_getHeight(window: *mut ANativeWindow) -> i32;
    pub fn ANativeWindow_getFormat(window: *mut ANativeWindow) -> WindowFormat;
    pub fn ANativeWindow_setBuffersGeometry(window: *mut ANativeWindow,
                                            width: i32, height: i32,
                                            format: WindowFormat) -> i32;
    pub fn ANativeWindow_lock(window: *mut ANativeWindow,
                              outBuffer: *mut ANativeWindow_Buffer,
                              inOutDirtyBounds: *mut ARect) -> i32;
    pub fn ANativeWindow_unlockAndPost(window: *mut ANativeWindow) -> i32;
}
